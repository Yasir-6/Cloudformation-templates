AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling for MyRoutePro ECS Service
Parameters:
  EnvironmentName: 
    Type: String
    Default: dev-vpc
    Description: Name of the environment.
  ClusterName:
    Type: String
    Default: dev-myroutepro
    Description: ECS Cluster name
  ServiceName:
    Type: String
    Default: myroutepro-service
    Description: ECS Service name
  MinCapacity:
    Type: Number
    Default: 1
    Description: Minimum number of tasks
  MaxCapacity:
    Type: Number
    Default: 4
    Description: Maximum number of tasks
  ScaleInCooldown:
    Type: Number
    Default: 300
    Description: Cooldown after scale-in (seconds)
  ScaleOutCooldown:
    Type: Number
    Default: 60
    Description: Cooldown after scale-out (seconds)
  CPUTargetValue:
    Type: Number
    Default: 70
    Description: CPU utilization target percentage

Resources:
  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Join ["/", ["service", !Ref ClusterName, !Ref ServiceName]]
      RoleARN: !GetAtt ECSServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CPUScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}-CPU-Scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        TargetValue: !Ref CPUTargetValue

  MemoryScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ServiceName}-Memory-Scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        TargetValue: 70  # 70% memory utilization

Outputs:
  AutoScalingTarget:
    Description: Auto Scaling Target ARN
    Value: !Ref AutoScalingTarget
    Export:
      Name: !Sub ${ServiceName}-AutoScalingTarget
  AutoScalingRole:
    Description: Auto Scaling Role ARN
    Value: !GetAtt ECSServiceAutoScalingRole.Arn
    Export:
      Name: !Sub ${ServiceName}-AutoScalingRole