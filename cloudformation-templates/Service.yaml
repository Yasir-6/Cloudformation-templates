AWSTemplateFormatVersion: '2010-09-09'
Description: API service - myroutepro service
Parameters:
  EnvironmentName: 
    Type: String
    Default: dev-vpc
    Description: Name of the environment.
  StackName:
    Type: String
    Default: "dev"
    Description: For Ecs Cluster Name
  ServiceName:
    Type: String
    Default: "myroutepro-service"
    Description: Service name
  ImageUrl:
    Type: String
    Default: 756074065494.dkr.ecr.us-east-1.amazonaws.com/myroutepro:latest
    Description: The url of a docker image
  ContainerPort:
    Type: Number
    Default: 8000
    Description: API port
  TaskCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU
  TaskMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: BasicTaskPermissions
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', ['service', !Ref 'ServiceName']]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'TaskCpu'
      Memory: !Ref 'TaskMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ECSTaskExecutionRole']]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'TaskCpu'
          Memory: !Ref 'TaskMemory'
          Image: !Ref 'ImageUrl'
          Environment:
            - Name: SETTINGS_FILE
              Value: "new_mrp.settings.local"
            - Name: ALLOWED_HOSTS
              Value: "*"
            - Name: CARDKNOX_KEY
              Value: "MootDesignDev_Test_bb0318102b984cdc812c15db93"
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['-', ['service', !Ref 'ServiceName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
          Command:
            - "uvicorn"
            - "new_mrp.asgi:application"
            - "--host"
            - "0.0.0.0"
            - "--port"
            - "8000"

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: 
        Fn::ImportValue: 
          !Join [':', [!Ref 'StackName', 'myroutepro']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      EnableExecuteCommand: true
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /admin/
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ServiceName'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200,302" 
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'VPCId']]

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'PublicLoadBalancerListener']]
      Priority: !Ref 'Priority'
